/* 
Name: Brandon Rubio 
   
UID: 117085785 
*/ 

#include <stdio.h>
#include <stdlib.h>
#include <sysexits.h>
#include <err.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include "command.h"
#include "executor.h"

#define EXIT_SUCCESS 0

/* static void print_tree(struct tree *t); */

int execute_aux(struct tree *t, int input_fd, int output_fd);

int execute(struct tree *t) {

  /* print_tree(t); */

  execute_aux(t, 0, 0);

  return 0;
}

/*Use file descriptors in recursive instead of a recursive call with only the tree passed in*/
int execute_aux(struct tree *t, int input, int output){
    pid_t pid, pid1, pid2;
    /*pid1 and pid2 are used for the two children
      processes used to implement PIPE processing*/
    int status;
    int pipes[2];
    
    if(t->conjunction == NONE){
      /*exit program*/
      
      if(strcmp(t->argv[0], "exit") == 0){

	exit(0);

      }else if(strcmp(t->argv[0], "cd") == 0){
	/*change directory with directory or none (go home)*/
	if(t->argv[1] == NULL){

	  if((chdir(getenv("HOME"))) < 0) {
	    perror("Failed to change directory");
	  }

	}else{
	  /*use given directory to cd*/
	  if(chdir(t->argv[1]) < 0){
	    perror(t->argv[1]);
	  }
	
	}
	
      }else {
	/*Commands that require exec*/
	pid = fork();
	
	if (pid < 0) {
	  perror("fork error");
	}
	
	if (pid != 0) {
	  /* Parent process */
	  
	  wait(&status);
	  
	  return status;
	  
	}else {
	  /* Child Process */
	  if (t->input) {
	    /*open input file*/
	    input = open(t->input, O_RDONLY);
	   
	    if(input < 0){
	      perror("Input file couldn't be opened.\n");
	    }
	    /* dup the output file end of pipe to STDIN*/
	    if (dup2(input, STDIN_FILENO) < 0) {
	      perror("dup2 input failed.\n");
	    }
	    /*close input file descriptor*/
	    close(input);
	  }
          
	  if (t->output) {
	    /*open output file, creat if doesn't exist, truncate if exists*/
	    output = open(t->output, O_WRONLY | O_CREAT | O_TRUNC, 0666);
	   
	    if (output < 0) {
	      perror("Output file couldn't be opened.\n");
	    }
	    /* dup the output file end of pipe to STDOUT*/
	    if (dup2(output, STDOUT_FILENO) < 0) {
	      perror("dup2 output failed.\n");
	    }
	    /*close output file descriptor*/
	    close(output);
	  }

	  /*use execvp to execute the linux command*/
	  if((execvp(t->argv[0],t->argv)) < 0){
	  
	    fprintf(stderr,"Failed to execute %s\n",t->argv[0]);
	    /*Is flush necessary?*/
	    fflush(stdout);
	  
	    exit(EX_OSERR);
	  }
	}
      }
      /*End of NONE*/

      /*AND processing was so much simpler than previously thought
       ALWAYS TRY NOT TO OVERCOMPLICATE!*/
    }else if (t->conjunction == AND){
      
      if(execute_aux(t->left, input, output) == 0){
	/*AND boolean success*/
	return execute_aux(t->right, input, output);
      }

      /*AND boolean failed*/
      return -1;     

    }else if(t->conjunction == PIPE){

      /********
How do I check for Ambiguous I/O redirection?????
      *********/
      if(t->left->output){
	printf("Ambiguous output redirect.\n");   
      }
      if(t->right->input){
	printf("Ambiguous input redirect.\n");
      }

      /*Must pipe before forking!!!*/
      if(pipe(pipes) < 0){
	perror("pipe error");
	exit(EX_OSERR);
      }

      /*Forking Here*/
      pid1 = fork();
      
      if(pid1 < 0){
	perror("fork error");
	exit(EX_OSERR);
      }
      
      if(pid1 == 0){ 
	/* First child process*/
	/*Close the input end of pipe*/
	close(pipes[0]);

	/* dup the read-end of pipe to STDOUT*/

	if(dup2(pipes[1], STDOUT_FILENO) < 0) {
	  perror("dup2 error");
	  exit(EX_OSERR);
	}

	/*Close read-end of pipe*/

	close(pipes[1]);

	/*process the left child node of PIPE Node*/

	execute_aux(t->left, input, output);
	
	exit(0);
	
      }else{         
	/* Parent Process */
	if((pid2 = fork()) < 0) {
	  perror("fork error");
	  exit(EX_OSERR);
	}
	
	if(pid2 == 0) {
	  /*Second child process*/
	  /*Close output end of pipe*/

	  close(pipes[1]);
	
	  /* dup the input pipe to STDIN*/
	  if(dup2(pipes[0], STDIN_FILENO) < 0) {
	    
	    perror("dup2 error");
	    exit(EX_OSERR);
	  }
	  /*Close input*/
	  close(pipes[0]);

	  /*process the right child node of the Pipe node*/
	  execute_aux(t->right, input, output);

	  exit(0);
	  
	}else{      

	  /* Parent Process */
	  int count = 1, i;
	  for(i = 0; i <= count; i++){
	    close(pipes[i]);
	  }

	  /*Reap the two child processes*/
	  count = 2;
	  for(i = 0; i < count; i++){
	    wait(NULL);
	  }
	}
      }
      /*End of PIPE*/
    }else if (t->conjunction == SUBSHELL){
      /*check if input needs to opened*/
      
      if(t->input){
	/*open input file descriptor*/
	input = open(t->input, O_RDONLY);

	if(input < 0) {
	  perror("Input file couldn't be opened.\n");
	}

	/* dup the input pipe to STDIN*/
	if(dup2(input, STDIN_FILENO) < 0){
	  perror("dup2 input failed.\n");
	}

	/*close input file descriptors*/
	close(input);
      }    

      /*check if output needs to be opened*/
      if (t->output) {
	/*open output file descriptor*/
	output = open(t->output, O_WRONLY | O_CREAT | O_TRUNC, 0666);

	if (output < 0) {
	 perror("Output file couldn't be opened.\n");
	}

	/* dup the input pipe to STDOUT*/

	if (dup2(output, STDOUT_FILENO) < 0) {
	  perror("dup2 output failed.\n");
	}

	/*Close the output file descriptor*/
	close(output);
      }
      
      /*Forking HERE*/
      pid = fork();

      if(pid < 0){
	perror("fork error");
      }
      
      if(pid != 0){
	/* Parent process */
	wait(NULL);
      }else {
	/* Child Process */
	execute_aux(t->left, input, output);
	exit(0);
      }
      /*End of SUBSHELL*/
    }
    
    return 0;
}

/*static void print_tree(struct tree *t) {
   if (t != NULL) {
      print_tree(t->left);

      if (t->conjunction == NONE) {
         printf("NONE: %s, ", t->argv[0]);
      } else {
         printf("%s, ", conj[t->conjunction]);
      }
      printf("IR: %s, ", t->input);
      printf("OR: %s\n", t->output);

      print_tree(t->right);
   }
}*/
